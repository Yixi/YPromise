{"name":"Ypromise","tagline":"A javascript promise library","body":"#YPromise\r\n\r\n\r\n基于 [Common JS Promises/A](http://wiki.commonjs.org/wiki/Promises) 建议的js异步编程库，提供一种Promise机制来管理js中的异步交互。\r\n\r\n##使用\r\n```javascript\r\nfunction fun3(){\r\n     return new YPro(function(comp,err){\r\n        setTimeout(function(){\r\n             comp('fun3 done');\r\n        },3000);\r\n     })\r\n}\r\nfunction fun4(){\r\n     return new YPro(function(comp,err){\r\n        setTimeout(function(){\r\n             comp('fun4 done');\r\n        },1000);\r\n     })\r\n}\r\nvar aPromise = fun3()\r\n\t\t\t\t.then(function(d){console.log(d); return fun4();})\r\n\t\t\t\t.then(function(){return fun3();})\r\n\t\t\t\t.then(function(){return fun4();})\r\n\t\t\t\t.done(function(){\r\n\t\t\t\t\tconsole.log(\"fun3->fun4->fun3->fun4 done\");\r\n\t\t\t\t})\r\n\r\nsetTimeout(function(){\r\n\taPromise.cancel(function(){\r\n\t\tconsole.log(\"Promise canceled\");\r\n\t});\r\n},9000);\r\n\r\n```\r\n\r\n\r\n##API\r\n如果你以前使用过window8开发中的WinJS.promise对象，你可以快速上手。\r\n\r\n###`YPro(Function)` or `YPromise(Function)` 构造器\r\n初始化一个promise对象,其中YPro提供一个对YPromise的简洁访问\r\n<pre>\r\nvar aPromise = new YPromise(init);\r\n</pre>\r\ninit方法中可传入三个参数，后面两个为可选\r\n\r\n* _completeDispatch_ 初始化代码中操作完成后需要调用这个函数传递结果\r\n* _errorDispatch_ 当发生错误时需要调用这方法传递错误\r\n* _progressDispatch_ 如果异步操作需要支持进度条，初始化代码应该定期调用这个功能，并传递一个进度中间值\r\n\r\n你需要使用这个返回一个promise对象来包裹你的异步函数\r\n<pre>\r\n/*example for constructor*/\r\n\r\nfunction fn1(){\r\n\treturn new YPro(function(comp,err,prog){\r\n\t\tvar i = 0;\r\n\t\tfunction sleep(){\r\n\t\t\ti++;\r\n\t\t\tif(i>100){\r\n\t\t\t\tcomp('fun1 done');\r\n\t\t\t}else{\r\n\t\t\t\tprog(i);\r\n\t\t\t\tsetTimeout(function(){\r\n\t\t\t\t\tsleep();\r\n\t\t\t\t},100);\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\tsleep();\r\n\t});\r\n}\r\n</pre>\r\n\r\n###`.then`\r\n\r\n指定promise完成后执行的函数，如果promise未完成则进行错误处理，以及处理进度变化通知\r\n<pre>\r\nYPro.then(onComplete, onError, onProgress).done();\r\n</pre>\r\n参数:\r\n* _onComplete_ promise成功后将会执行此方法，参数来自构造函数中的 _completeDispatch_ 传递\r\n* _onError_ promise发生错误将会调用此方法\r\n* _onProgress_ 如果promise函数中有来自 _progressDispatch_ 调用将会触发此方法\r\n\r\n返回：\r\n该方法将会返回一个 `YPromise` 对象\r\n\r\n<pre>\r\nvar PromiseA = fun1()\r\n\t.then(\r\n\t\tfunction(data){\r\n\t\t\tconsole.log(data);\r\n\t\t},\r\n\t\tfunction(error){\r\n\t\t\tconsole.error(error);\r\n\t\t},\r\n\t\tfunction(prog){\r\n\t\t\tconsole.log(prog+\"%\");\r\n\t\t}\r\n\t);\r\n</pre>\r\n\r\n###`.done` (待完善)\r\n提供和then一样的作用，此方法不会传递错误值，将会把异常直接抛出\r\n<pre>\r\nYPro.done(omComplete);\r\n</pre>\r\n\r\n###`YPromise.join`\r\n\r\n合并多个promise，当所有Promise完成后将会执行then方法，返回对应位置promise的返回，若promise返回参数多于一个，将会以数组的形式传递返回。\r\n<pre>\r\nYPro.join(promise1,promise2,...).then(onComplete);\r\n</pre>\r\n参数：\r\n一个或多个YPromsie对象\r\n\r\n返回：该方法将会返回一个`YPromise`对象\r\n<pre>\r\nvar PromiseAll = YPro.join(fn1(),fn2())\r\n\t\t\t.then(function(data1,data2){\r\n\t\t\t\tconsole.log(data1,data2);\r\n\t\t\t})\r\n</pre>\r\n\r\n\r\n###`YPromise.any`\r\n用法类似`YPromise.join`,但不需要等待所有proimise完成，一旦其中任意一个promise完成将会立即传递这个promise的返回值。\r\n<pre>\r\nYPro.any(promise1,promise2,…).then(onComplete);\r\n</pre>\r\n\r\n返回，该方法返回一个`YPromise`对象\r\n\r\n<pre>\r\nvar PromiseAny = YPro.join(fn1(),fn2())\r\n\t\t\t.then(function(data){\r\n\t\t\t\tconsole.log(data);\r\n\t\t\t});\r\n</pre>\r\n\r\n###`YPromise.as`\r\n此方法将会把同步方法以Promise的方式调用,以解决特殊时候需求\r\n\r\n<pre>\r\nYPro.as(Function).then(onComplete);\r\n</pre>\r\n\r\n返回：该方法将会返回一个`YPromise`对象\r\n\r\n<pre>\r\nfunction fn5(){\r\n\treturn 'function 5 done';\r\n}\r\nvar PromiseAs = YPro.as(fn5())\r\n\t\t\t.then(function(data){\r\n\t\t\t\tconsole.log(data);\r\n\t\t\t});\r\n\r\n</pre>\r\n\r\n###`YPromise.cancel`\r\n调用该方法将会取消promise链的向下执行\r\n<pre>\r\nYPromsise.cancel();\r\n</pre>\r\n\r\n***\r\n更多用法请参考/example例子\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}